// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	postgresDB "urleater/internal/repository/postgresDB"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// CreateShortLink provides a mock function with given fields: ctx, shortLink, longLink, userEmail
func (_m *Service) CreateShortLink(ctx context.Context, shortLink string, longLink string, userEmail string) (*postgresDB.Link, error) {
	ret := _m.Called(ctx, shortLink, longLink, userEmail)

	if len(ret) == 0 {
		panic("no return value specified for CreateShortLink")
	}

	var r0 *postgresDB.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*postgresDB.Link, error)); ok {
		return rf(ctx, shortLink, longLink, userEmail)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *postgresDB.Link); ok {
		r0 = rf(ctx, shortLink, longLink, userEmail)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*postgresDB.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, shortLink, longLink, userEmail)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteShortLink provides a mock function with given fields: ctx, shortLink, email
func (_m *Service) DeleteShortLink(ctx context.Context, shortLink string, email string) error {
	ret := _m.Called(ctx, shortLink, email)

	if len(ret) == 0 {
		panic("no return value specified for DeleteShortLink")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, shortLink, email)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetShortLink provides a mock function with given fields: ctx, shortLink
func (_m *Service) GetShortLink(ctx context.Context, shortLink string) (*postgresDB.Link, error) {
	ret := _m.Called(ctx, shortLink)

	if len(ret) == 0 {
		panic("no return value specified for GetShortLink")
	}

	var r0 *postgresDB.Link
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*postgresDB.Link, error)); ok {
		return rf(ctx, shortLink)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *postgresDB.Link); ok {
		r0 = rf(ctx, shortLink)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*postgresDB.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, shortLink)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscriptions provides a mock function with given fields: ctx
func (_m *Service) GetSubscriptions(ctx context.Context) ([]postgresDB.Subscription, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetSubscriptions")
	}

	var r0 []postgresDB.Subscription
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]postgresDB.Subscription, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []postgresDB.Subscription); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postgresDB.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUser provides a mock function with given fields: ctx, email
func (_m *Service) GetUser(ctx context.Context, email string) (*postgresDB.User, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *postgresDB.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*postgresDB.User, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *postgresDB.User); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*postgresDB.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserShortLinksWithOffsetAndLimit provides a mock function with given fields: ctx, email, offset, limit
func (_m *Service) GetUserShortLinksWithOffsetAndLimit(ctx context.Context, email string, offset int, limit int) ([]postgresDB.Link, *postgresDB.User, error) {
	ret := _m.Called(ctx, email, offset, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetUserShortLinksWithOffsetAndLimit")
	}

	var r0 []postgresDB.Link
	var r1 *postgresDB.User
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) ([]postgresDB.Link, *postgresDB.User, error)); ok {
		return rf(ctx, email, offset, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []postgresDB.Link); ok {
		r0 = rf(ctx, email, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]postgresDB.Link)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) *postgresDB.User); ok {
		r1 = rf(ctx, email, offset, limit)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*postgresDB.User)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, int, int) error); ok {
		r2 = rf(ctx, email, offset, limit)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// LoginUser provides a mock function with given fields: ctx, email, password
func (_m *Service) LoginUser(ctx context.Context, email string, password string) error {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RegisterUser provides a mock function with given fields: ctx, email, password
func (_m *Service) RegisterUser(ctx context.Context, email string, password string) error {
	ret := _m.Called(ctx, email, password)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, email, password)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserShortLinks provides a mock function with given fields: ctx, email, deltaLinks
func (_m *Service) UpdateUserShortLinks(ctx context.Context, email string, deltaLinks int) (*postgresDB.User, error) {
	ret := _m.Called(ctx, email, deltaLinks)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserShortLinks")
	}

	var r0 *postgresDB.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, int) (*postgresDB.User, error)); ok {
		return rf(ctx, email, deltaLinks)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, int) *postgresDB.User); ok {
		r0 = rf(ctx, email, deltaLinks)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*postgresDB.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, int) error); ok {
		r1 = rf(ctx, email, deltaLinks)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewService creates a new instance of Service. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewService(t interface {
	mock.TestingT
	Cleanup(func())
}) *Service {
	mock := &Service{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
